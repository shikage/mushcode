@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Copyright 2016 Chris Workman "ShiKage"
@@
@@ Licensed under the Apache License, Version 2.0 (the "License");
@@ you may not use this file except in compliance with the License.
@@ You may obtain a copy of the License at
@@
@@ http://www.apache.org/licenses/LICENSE-2.0
@@
@@ Unless required by applicable law or agreed to in writing, software
@@ distributed under the License is distributed on an "AS IS" BASIS,
@@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ See the License for the specific language governing permissions and
@@ limitations under the License.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Pre-setup prep
@@ Some steps to prepare for the initial setup
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Quiet set/triggered messages while performing install
@ifelse [hasflag(%#,QUIET)]=
    {
        &__SET_QUIET %#=1
    },
    {
        @set %#=QUIET
    }

@@ Starting code setup
think Starting setup of ShiKage Space Generation system

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ System Core Object
@@ Core object that contains data referenced by
@@ other objects in this system
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Start by getting the Core object DB# or creating one
@switch [words(setr(0,[search(THING=\\\[SSGC\\\] ShiKage's Space Generation - Core)]))]=0,
    {
        &__CORE_NUM %#=[create(\[SSGC\] ShiKage's Space Generation - Core)];
        think New Core object created with DBref [get(%#/__CORE_NUM)]
    },
    {
        &__CORE_NUM %#=[extract(%q0,1,1)];
        think Updating existing Core object with DBref [get(%#/__CORE_NUM)]
    }

@@ Add object DB# to Core
@sudo %#=
    {
        &__CORE_NUM [get(%#/__CORE_NUM)]=[get(%#/__CORE_NUM)];
    }    
    
@@ Custom LCG function, roughly 32-bit period.
&FN_LCG [get(%#/__CORE_NUM)]=
    [mod(
        add(
            mul(1664525,%0),
            1013904223
        ),
        4294967296
    )]    
    
@@ Galaxy/Space Definitions
&D_MAX_SIZE [get(%#/__CORE_NUM)]=2147483647

@@ Sector Variables
&D_COLS_PER_SECTOR     [get(%#/__CORE_NUM)]=32
&D_ROWS_PER_SECTOR     [get(%#/__CORE_NUM)]=32
&D_SECTORS_PER_ROW     [get(%#/__CORE_NUM)]=2048
&D_SECTORS_PER_COL     [get(%#/__CORE_NUM)]=2048
&D_MAX_SECTORS         [get(%#/__CORE_NUM)]=4235363

@@ Subsector Variables
&D_SUBSECTORS          [get(%#/__CORE_NUM)]=16
&D_ROWS_PER_SUB        [get(%#/__CORE_NUM)]=8
&D_COLS_PER_SUB        [get(%#/__CORE_NUM)]=8
&D_SUB_SECTOR_ROWS     [get(%#/__CORE_NUM)]=4
&D_SUB_SECTOR_COLS     [get(%#/__CORE_NUM)]=4
&D_SUB_SECTOR_IDS      [get(%#/__CORE_NUM)]=
    Alpha Beta Gamma Delta Epsilon Zeta Eta Theta Iota Kappa Lambda Mu Nu Xi Omicron Pi

@@ Version, Credits, & License
&__VERSION [get(%#/__CORE_NUM)]=0.1-alpha
&__CREDITS [get(%#/__CORE_NUM)]=Created by Chris Workman (aka. ShiKage) c2016
&__LICENSE [get(%#/__CORE_NUM)]=Licensed under Apache License, v2.0 (http://www.apache.org/licenses/LICENSE-2.0) 

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Sector Generator
@@ Code to generate individual sectors of space.
@@ These follow Traveller 5 rules and are roughly
@@ 1280 parsecs to a sector (32 x 32)
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Start by getting the object DB# or creating one
@switch [words(setr(0,[search(THING=\\\[SSGSG\\\] ShiKage's Space Generation - Sector Generator)]))]=0,
    {
        &__SECTOR_GEN_NUM %#=[create(\[SSGSG\] ShiKage's Space Generation - Sector Generator)];
        think New Sector Generator object created with DBref [get(%#/__SECTOR_GEN_NUM)]
    },
    {
        &__SECTOR_GEN_NUM %#=[extract(%q0,1,1)];
        think Updating existing Sector Generator object with DBref [get(%#/__SECTOR_GEN_NUM)]
    }

@@ Add object DB# to Core and set parent
@sudo %#=
    {
        &__SECTOR_GEN_NUM [get(%#/__CORE_NUM)]=[get(%#/__SECTOR_GEN_NUM)];
        @parent [get(%#/__SECTOR_GEN_NUM)]=[get(%#/__CORE_NUM)]
    } 

@@ Set Required Flags
@set [get(%#/__SECTOR_GEN_NUM)]=!halt royal sidefx
    
@@ Generate a sector
&FN_CREATE_SECTOR [get(%#/__SECTOR_GEN_NUM)]=
    [@@(
        %0 -- Sector ID, %q0 -- Sector Object, 
        %q1 -- Sector Row, %q2 -- Sector Col,
        %q3 -- North Sector, %q4 -- South Sector,
        %q5 -- West Sector, %q6 -- East Sector,
        %q7 -- Subsector Number
    )]
    [ifelse(
        [between(0,get(%!/D_MAX_SECTORS),%0,1)],
        {
            [ifelse(
                [and(hasattr(%!,D_%0),isdbref(setr(0,v(D_SECTOR_%0))),hasattr(%q0,D_SID))],
                {
                    [pemit(%#,Sector %0 already exists \\\[DB# %q0\\\])]
                },
                {
                    [setq(0,create(Sector %0))]
                    [set(%!,D_SECTOR_%0:%q0)]
                    [set(%q0,
                        D_SID:
                            %0
                    )]
                    [set(%q0,
                        D_SECTOR_ROW:
                            [setr(1,floor(fdiv(%0,get(%!/D_SECTORS_PER_ROW))))]
                    )]
                    [set(%q0,
                        D_SECTOR_COL:
                            [setr(2,sub(mod(%0,get(%!/D_SECTORS_PER_COL)),1))]
                    )]
                    [set(%q0,
                        D_SYSTEM_ROW:
                            [mul(%q1,get(%!/D_ROWS_PER_SECTOR))]
                    )]
                    [set(%q0,
                        D_SYSTEM_COL:
                            [mul(%q2,get(%!/D_COLS_PER_SECTOR))]
                    )]
                    %q0
                }
            )]
        },
        {
            #-1 INVALID SECTOR ID
        }
    )]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Sub Sector Generator
@@ Code to generate individual sub sectors of space.
@@ These follow Traveller 5 rules and are contain
@@ 64 parsecs each (8 x 8)
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Start by getting the object DB# or creating one
@switch [words(setr(0,[search(THING=\\\[SSGSubG\\\] ShiKage's Space Generation - Subsector Generator)]))]=0,
    {
        &__SUB_GEN_NUM %#=[create(\[SSGSubG\] ShiKage's Space Generation - Subsector Generator)];
        think New Subsector Generator object created with DBref [get(%#/__SUB_GEN_NUM)]
    },
    {
        &__SUB_GEN_NUM %#=[extract(%q0,1,1)];
        think Updating existing Subsector Generator object with DBref [get(%#/__SUB_GEN_NUM)]
    }

@@ Add object DB# to Core and set parent
@sudo %#=
    {
        &__SUB_GEN_NUM [get(%#/__CORE_NUM)]=[get(%#/__SUB_GEN_NUM)];
        @parent [get(%#/__SUB_GEN_NUM)]=[get(%#/__CORE_NUM)]
    } 

@@ Set Required Flags
@set [get(%#/__SUB_GEN_NUM)]=!halt sidefx
    
@@ Create Subsector
&FN_CREATE_SUBSECTOR [get(%#/__SUB_GEN_NUM)]=
    [@@(
        %0 -- Sector DB#, %1 -- Subsector ID,
        %q0 -- Subsector Obj, %q1 -- Subsector Row,
        %q2 -- Subsector Col, %q3 -- Subsector X,
        %q4 -- Subsector Y
    )]
    [ifelse(
        [and(isdbref(%0),hasattr(%0,D_SID))],
        {
            [ifelse(
                [between(0,get(%!/D_SUBSECTORS),%1,1)],
                {
                    [setq(0,create(Subsector [get(%0/D_SID)] [extract(get(%!/D_SUB_SECTOR_IDS),add(%1,1),1)]))]
                    [null(parent(%q0,%0))]
                    [set(%q0,
                        D_SUBID:
                            [mul(
                                get(%0/D_SID),
                                %1
                            )]
                    )]
                    [set(%q0,
                        D_SUB_ROW:
                            [setr(1,floor(fdiv(%1,get(%!/D_SUB_SECTOR_ROWS))))]
                    )]
                    [set(%q0,
                        D_SUB_COL:
                            [setr(2,mod(%1,get(%!/D_SUB_SECTOR_COLS)))]
                    )]
                    [set(%q0,
                        D_SUB_Y:
                            [setq(4,
                                sub(
                                    ceil(fdiv(mul(get(%!/D_SECTORS_PER_ROW),get(%!/D_SUB_SECTOR_ROWS)),2)),
                                    add(%q1,mul(get(%0/D_SECTOR_ROW),get(%!/D_SUB_SECTOR_ROWS)))
                                )
                            )]
                    )]
                    [set(%q0,
                        D_SUB_X:
                            [setr(3,
                                sub(
                                    add(%q1,mul(get(%0/D_SECTOR_COL),get(%!/D_SUB_SECTOR_COLS))),
                                    ceil(fdiv(mul(get(%!/D_SECTORS_PER_COL),get(%!/D_SUB_SECTOR_COLS)),2))
                                )
                            )]
                    )]
                    [set(%q0,
                        D_SYSTEM_ROW:
                            [add(get(%0/D_SYSTEM_ROW),mul(%q1,get(%!/D_ROWS_PER_SUB)))]
                    )]
                    [set(%q0,
                        D_SYSTEM_COL:
                            [add(get(%0/D_SYSTEM_COL),mul(%q2,get(%!/D_COLS_PER_SUB)))]
                    )]
                    [set(%q0,
                        D_DENSITY:
                            [ulocal(%!/FN_DENSITY,%q3, %q4)]
                    )]
                    %q0
                },
                {
                    #-2 INVALID SUBSECTOR ID
                }
            )]
        },
        {
            #-1 INVALID SECTOR DB#
        }
    )]
    
@@ Calculate The Star Density
&FN_DENSITY [get(%#/__SUB_GEN_NUM)]=
    [@@(
        %0 -- Subsector X, %1 -- Subsector Y,
        %q0 -- Distance from Core, %q1 -- Angle of distance,
        %q2 -- Core value, %q3 -- Arms value
    )]
    [setq(0,
        sqrt(
            add(
                mul(%0, %0),
                mul(%1, %1)
            )
        )
    )]
    [setq(1,
        atan(fdiv(%1,%0))
    )]
    [setq(2,
        sub(
            1,
            power(
                fdiv(%q0, 2048),
                2
            )
        )
    )]
    [setq(3,
        add(
            mul(
                power(2.71828,sub(0,fdiv(%q0,3072))),
                0.5,
                power(
                    sin(
                        sub(
                            power(mul(0.5,%q0),0.35),
                            %q1
                        )
                    ),    
                    2
                )
            ),
            sub(
                0.5,
                fdiv(%q0,10000)
            )
        )
    )]
    [mul(0.94,max(%q2, %q3, 0.01))]
    
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Star System Generator
@@ Code to support the generation of a star system
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Start by getting the object DB# or creating one
@switch [words(setr(0,[search(THING=\\\[SSGSSG\\\] ShiKage's Space Generation - Star System Generator)]))]=0,
    {
        &__STAR_SYSTEM_NUM %#=[create(\[SSGSSG\] ShiKage's Space Generation - Star System Generator)];
        think New Star System Generator object created with DBref [get(%#/__STAR_SYSTEM_NUM)]
    },
    {
        &__STAR_SYSTEM_NUM %#=[extract(%q0,1,1)];
        think Updating existing Star System Generator object with DBref [get(%#/__STAR_SYSTEM_NUM)]
    }

@@ Add object DB# to Core and set parent
@sudo %#=
    {
        &__STAR_SYSTEM_NUM [get(%#/__CORE_NUM)]=[get(%#/__STAR_SYSTEM_NUM)];
        @parent [get(%#/__STAR_SYSTEM_NUM)]=[get(%#/__CORE_NUM)]
    } 

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    
@@ Planet Name Generation Object
@@ This uses the algorithm use in the original Elite game
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Start by getting the namegen object DB# or creating one
@switch [words(setr(0,[search(THING=\\\[SSGNG\\\] ShiKage's Space Generation - NameGen)]))]=0,
    {
        &__NAMEGEN_NUM %#=[create(\[SSGNG\] ShiKage's Space Generation - NameGen)];
        think New NameGen object created with DBref [get(%#/__NAMEGEN_NUM)]
    },
    {
        &__NAMEGEN_NUM %#=[extract(%q0,1,1)];
        think Updating existing NameGen object with DBref [get(%#/__NAMEGEN_NUM)]
    }

@@ Add object DB# to Core and set parent
@sudo %#=
    {
        &__NAMEGEN_NUM [get(%#/__CORE_NUM)]=[get(%#/__NAMEGEN_NUM)];
        @parent [get(%#/__NAMEGEN_NUM)]=[get(%#/__CORE_NUM)]
    }    
    
@@ Set Required Flags
@set [get(%#/__NAMEGEN_NUM)]=!halt sidefx

@@ Pairs
&D_PAIRS [get(%#/__NAMEGEN_NUM)]=..lexegezacebisousesarmaindirea.eratenberalavetiedorquanteisrion
    
@@ Initialize Seed
&FN_INIT [get(%#/__NAMEGEN_NUM)]=[setq(0,[todec(0x5a4a)] [todec(0x0248)] [todec(0xb753)])]

@@ Generate Random Seeds
&FN_RAND_SEEDS [get(%#/__NAMEGEN_NUM)]=[mod(%0,32767)] [setr(s,mod(u(v(__CORE_NUM)/FN_LCG,mod(%0,32767)),32767))] [mod(u(v(__CORE_NUM)/FN_LCG,%qs),32767)]
    
@@ Shuffle Seeds
&FN_SHUFFLE [get(%#/__NAMEGEN_NUM)]=
    [@@(%q0 -- Seed 1, %q1 -- Seed 2, %q2 -- Seed 3, %q3 -- Seed Temp)]
    [setq(0,extract(%0,1,1))]
    [setq(1,extract(%0,2,1))]
    [setq(2,extract(%0,3,1))]
    [setq(3,mask(add(%q0,%q1,%q2),todec(0xFFFF),&))]
    %q1 %q2 %q3

@@ Check for Long name bit
&FN_LONGNAME [get(%#/__NAMEGEN_NUM)]=[eq(mask(extract(%0,1,1),todec(0x40),&),todec(0x40))]

@@ Get Pair Index
&FN_INDEX [get(%#/__NAMEGEN_NUM)]=
    [mod(
        mul(2,
            mask(
                div(%0,256),
                todec(0x1f)
            )
        ),
        strlen(u(%!/D_PAIRS))
    )]

@@ Generate A Name
&FN_CREATE_NAME [get(%#/__NAMEGEN_NUM)]=
    [@@(%0/%q0 -- Seed values, %q1 -- Longname Flag, %q2 -- Seed 2, 
        %qa -- pair index, %qz -- Planet name)]
    [setq(0,%0)]
    [setq(1,[ulocal(%!/FN_LONGNAME,%q0)])]
    [setq(z,)]
    [iter(lnum(4),
        [setq(2,[extract(%q0,3,1)])]
        [setq(0,[ulocal(%!/FN_SHUFFLE,%q0)])]
        [setq(a,[u(%!/FN_INDEX, %q2)])]
        [ifelse([or(lt(itext(),3),%q1)],
            [setq(z,%qz[mid(get(%!/D_PAIRS),%qa,2)])]
        )]
    ,%b,)]
    [capstr(edit(%qz,.,))]
    
@@ Generate A List of Worlds
&FN_CREATE_WORLDS [get(%#/__NAMEGEN_NUM)]=
    [@@(%q0 -- Seed Values)]
    [setq(0,0)]
    [switch(1,
        eq(words(%0),1),
            [setq(0,u(%!/FN_RAND_SEEDS,%0))],
        eq(words(%0),3),
            [setq(0,%0)],
        [u(%!/FN_INIT)]
    )]
    [iter(lnum(20),
        [pemit(%#,PLANET ##: [u(%!/FN_CREATE_NAME,%q0)])]
    )]

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Staff Commands
@@ Contains staff commands for using the space
@@ generation code.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Start by getting the object DB# or creating one
@switch [words(setr(0,[search(THING=\\\[SSGSC\\\] ShiKage's Space Generation - Staff Commands)]))]=0,
    {
        &__STAFF_NUM %#=[create(\[SSGSC\] ShiKage's Space Generation - Staff Commands)];
        think New Staff Commands object created with DBref [get(%#/__STAFF_NUM)]
    },
    {
        &__STAFF_NUM %#=[extract(%q0,1,1)];
        think Updating existing Staff Commands object with DBref [get(%#/__STAFF_NUM)]
    }

@@ Add object DB# to Core and set parent
@sudo %#=
    {
        &__STAFF_NUM [get(%#/__CORE_NUM)]=[get(%#/__STAFF_NUM)];
        @parent [get(%#/__STAFF_NUM)]=[get(%#/__CORE_NUM)]
    }
    
@@ Set necessary flags
@set [get(%#/__STAFF_NUM)]=!halt royal

@@ Lock the object to staff
&IS_STAFF [get(%#/__STAFF_NUM)]=[orflags(%#,BagiW)]
@lock/use [get(%#/__STAFF_NUM)]=IS_STAFF/1

@@ Create a new sector and it's contents
&CMD_@NEWSECTOR [get(%#/__STAFF_NUM)]=$@NEWSECTOR:
    @pemit %#=Usage: @newsector <sector number>%r[space(7)]Valid sector numbers are 0 - [get(%!/D_MAX_SECTORS)]
    
&CMD_@NEWSECTOR_ARGS [get(%#/__STAFF_NUM)]=$@NEWSECTOR *:
    @@ {
        %0 -- Sector number, %q0 -- Sector Generator Obj, 
        %q1 -- Subsector Generator Obj, %q2 -- Sector Obj Created, 
        %q3 -- Subsector Number, %q4 -- Subsector Obj Created,
        %qz -- Sector Obj found
    };
    @assert [between(0,get(%!/D_MAX_SECTORS),%0,1)]={@pemit %#=Invalid sector number: %0};
    @break 
        [and(
            [hasattr(get(%!/__SECTOR_GEN_NUM),D_SECTOR_%0)],
            [isdbref(setr(z,get(get(%!/__SECTOR_GEN_NUM)/D_SECTOR_%0)))],
            [hasattr(%qz,D_SID)]
        )]={@pemit %#=Sector %0 already exists.};
    @pemit %#=Creating Sector %0...;
    @eval   [setq(0,get(%!/__SECTOR_GEN_NUM))]
            [setq(1,get(%!/__SUB_GEN_NUM))]
            [setq(2,ulocal(%q0/FN_CREATE_SECTOR,%0))];
    @pemit %#=%b%bGenerating Subsectors....;
    @dolist/inline [lnum(get(%!/D_SUB_SECTOR_ROWS))]=
    {
        @dolist/inline [lnum(get(%!/D_SUB_SECTOR_COLS))]=
        {
            @eval 
            {
                [setq(3,
                    [add(
                        mul(%d1,get(%!/D_SUB_SECTOR_COLS)),
                        %d0
                    )]
                )]
                [setq(4,ulocal(%q1/FN_CREATE_SUBSECTOR,%q2,%q3))]
            };
            @pemit %#=[space(4)]Created [name(%q4)] \(%q4\)
        }
    };
    @pemit %#=Sector %0 has been created.    

@@ Destroy a sector
&CMD_@RMSECTOR [get(%#/__STAFF_NUM)]=$@RMSECTOR:
    @pemit %#=Usage: @rmsector <sector number>%r[space(7)]Valid sector numbers are 0 - [get(%!/D_MAX_SECTORS)]
    
&CMD_@RMSECTOR_ARGS [get(%#/__STAFF_NUM)]=$@RMSECTOR *:
    @assert [and(
            [hasattr(get(%!/__SECTOR_GEN_NUM),D_SECTOR_%0)],
            [isdbref(setr(z,get(get(%!/__SECTOR_GEN_NUM)/D_SECTOR_%0)))],
            [hasattr(%qz,D_SID)]
        )]={@pemit %#=Sector %0 does not exist.};
    @dolist/inline [children(%qz)] %qz=
    {
        @pemit %#=Destroying [name(%d0)];
        @dest %d0
    };
    @pemit %#=Completed removing Sector %0
    
@@ Send object to master room if one exists
@switch 1=[and(isdbref(setr(0,#[config(MASTER_ROOM)])),hastype(%q0,ROOM))],
    {
        @pemit %#=Sending Staff Commands object to Master Room \(%q0\);
        @tel [get(%#/__STAFF_NUM)]=%q0
    }
    
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Post-setup clean-up
@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ Remove object reference attributes
&__CORE_NUM %#=
&__SECTOR_GEN_NUM %#=
&__SUB_GEN_NUM %#=
&__STAR_SYSTEM_NUM %#=
&__NAMEGEN_NUM %#=
&__STAFF_NUM %#=

@@ Reset Quiet flag
@ifelse [hasattr(%#,__SET_QUIET)]=
    {
        &__SET_QUIET %#=
    },
    {
        @set %#=!QUIET
    }
    
think ShiKage's Space Generation setup has completed